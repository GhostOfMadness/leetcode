"""
Shifting Letters.

Дана строка s и массив целых чисел shifts. shifts[i] показывает сколько раз
каждая из первых i + 1 букв должна быть сдвинута на 1 вправо (z переходит в a).
Например, s = 'abc', shifts = [3, 5, 9]. Первая буква сдвигается 3 раза вправо,
получаем s = 'dbc', затем первые 2 буквы сдвигаются на 5 вправо - 'igc',
наконец все буквы сдвигаются на 9 вправо - 'rpl'. Получить строку после
всех сдвигов.

Наивным решением будет каждый раз проходить от начала массива до i + 1 и
сдвигать буквы на shifts[i] позиций вправо, O(n ** 2) по времени. Поэтому
лучше сразу найти величину сдвига для каждой буквы. Можно заметить, что
первая буква сдвигается на sum(shifts[: n]), вторая - на sum(shifts[1: n]),
..., последняя - на shifts[n - 1: n]. То есть общяя величина сдвига
определяется суффиксной суммой для текущего индекса. Наращивать сумму и
собирать ответ можно внутри одного цикла, поэтому весь массив суффиксных
сумм не понадобится, только значение предыдущего шага.

Также важно учесть, что shifts[i] лежит на отрезке [-10 ** 9, 10 ** 9],
то есть может включать себя много кругов по словарю. Поэтому будем брать
остаток от деления на 26 (размер алфавита) от суффиксной суммы.

Идем циклом от конца. Для нахождения сдвига берем накопленное значение
с предыдущих шагов (prev), добавляем текущее и берем остаток от деления на 26.
Находим новый Unicode код символа new_ord = ord(s[i]) + shift. Если этот код
больше 122 (код символа 'z'), то берем остаток от деления этого кода на 122
и прибавляем его к 96 (код символа 'a' за минусом единицы). В ином случае,
осталяем код без изменений. В массив ответа заносим соответствующий коду
символ. В prev сохранеям новое накопленное значение shift. В конце соединяем
ответ с помощью join.

Лучшее решение: 59 ms, 29.17 Mb
"""


class Solution:

    def shiftingLetters(self, s: str, shifts: list[int]) -> str:
        n = len(shifts)
        ans = [None] * n
        prev = 0
        for i in range(n - 1, -1, -1):
            shift = (prev + shifts[i]) % 26
            new_ord = ord(s[i]) + shift
            if new_ord > 122:
                ans[i] = chr(96 + new_ord % 122)
            else:
                ans[i] = chr(new_ord)
            prev = shift
        return ''.join(ans)
