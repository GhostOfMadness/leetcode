"""
Ways to Expresss an Integer as Sum of Powers.

Дано положительное целое число n, не превосходящее 300. Найти количество
способов представить n как сумму целых чисел в степени x:
n = a1 ** x + a2 ** x + ... + ak ** x.
Числа в комбинации не повторяются, то есть a1 != a2 != a3 != ... !+ ak,
1 <= x <= 5.

Используем метод динамического программирования. Создадим массив dp размером
на 1 больше, чем число n (для удобства обращения к индексам). dp[i] - кол-во
способов получить число i. Начинаем перебирать все числа от 1 до n. Как только
при возведении в степень x какое-то число становится больше n, выходим из
цикла. Если число в степени x не превышает n, то проходимся справа налево
от n - num (так как суммы больше n не нужны) до начала массива. Если dp[j]
не равно 0, то число j можно получить dp[j] способами. Следовательно этим
же количеством способов с добавлением num можно получить число j + num.
То есть увеличиваем dp[j + num] на dp[j].

Лучшее решение: 308 ms, 17.90 Mb
"""


class Solution:

    def numberOfWays(self, n: int, x: int) -> int:
        mod = 10 ** 9 + 7
        dp = [0] * (n + 1)
        for i in range(1, n + 1):
            num = pow(i, x)
            if num > n:
                break
            for j in range(n - num, 0, -1):
                if dp[j]:
                    dp[j + num] = (dp[j + num] + dp[j]) % mod
            dp[num] = (dp[num] + 1) % mod
        return dp[n]
