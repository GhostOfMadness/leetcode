"""
Range Product Queries of Powers.

Дано целое число n, не превышающее 10 ** 9. Массив arr состоит из минимального
количество степеней двойки, сумма которых дает n. arr отсортирован в порядке
возрастания. Массив queries состоит из пар чисел left и right, задающих
границы интервала в массиве arr. Необходимо найти произвдение всех чисел
внутри каждого интервала по модулю 10 ** 9 + 7.

Для получения массива arr нужно представить n в двоичном виде, тогда каждый
единичный бит будет соответствовать степени двойки: самый младший - 0,
следующий - 1, и т.д. Например, 91 = 1011011 = 1 + 2 + 8 + 16 + 64. Так как
произведение степеней двойки тоже является степенью двойки, то можно сохранять
только само значение степени. То есть вместо [1, 2, 8, 16, 64] сохранить
[0, 1, 3, 4, 6]. При этом для каждого запроса нужно суммировать значения
степеней, поэтому можно сразу при создании сделать массив arr массивом
префиксных сумм с добавлением 0 в начале -> [0, 0, 1, 4, 8, 14]. Тогда общая
степень двойки в интервале равна arr[right + 1] - arr[left].

Лучшее решение: 78 ms, 48.18 Mb
"""


class Solution:

    def productQueries(self, n: int, queries: list[list[int]]) -> list[int]:
        arr = [0]
        curr = 0
        while n:
            if n & 1 == 1:
                arr.append(arr[-1] + curr)
            n >>= 1
            curr += 1
        mod = 10 ** 9 + 7
        return [
            pow(2, arr[right + 1] - arr[left], mod)
            for left, right in queries
        ]
