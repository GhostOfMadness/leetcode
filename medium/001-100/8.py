"""
String to Integer (atoi).

Необходимо считать число из строки по следующим правилам:
- пробелы в начале строки игнорируются.
- знак задается символами "-" или "+", если такой символ отсутствует в начале,
  то число считается положительным.
- считываются все цифры, кроме ведущих нулей, до тех пор, пока не встретится
  отличный от цифры символ или указатель не дойдет до конца строки.
- если число выходит за 32 бита, то оно "округляется" до 2 ** 31 - 1,
  если число положительное, иначе - до -2 ** 31.

Можно считать знак и первые 11 цифр числа (кроме ведущих нулей) с помощью
регулярного выражения. Имеет смысл смотреть на 11 цифр, так как 2 ** 31
состоит из 10. Затем перевести найденное число в целочисленный формат и
"округлить" при необходимости.

Можно считывать элементы построчно. Проблемы опускаем, используя lstrip.
Если символ равен "-" или "+", а знак и число еще не определены, то заносим
знак в переменную sign. Если символ равен одной из цифр, то добавляем его
к числу. Число храним сразу в int, для добавления новой цифры умножаем
предыдущий результат на 10 и прибавляем текущую цифру. Если число стало
больше или равно порогового значения (comp), то "округляем" его до порога
с нужным знаком и возвращаем. Для всех остальных случаев прерываем цикл
и возвращаем найденное число с полученным знаком.

Вариант со строкой на 100 запусках 10 ** 6 случайных тестов в среднем работает
в 2.1 раза быстрее, чем способ на регулярном выражении.

Лучшее решение: 0 ms, 17.72 Mb
"""
import re


class Solution:

    def myAtoi_reg_exp(self, s: str) -> int:
        num = re.search(r'^([-+]{0,1})0*([0-9]{1,11})', s.strip())
        if not num:
            return 0
        sign = num.group(1)
        num = num.group(2)
        if sign == '-':
            return max(-1 * int(num), -2 ** 31)
        return min(int(num), 2 ** 31 - 1)

    def myAtoi_str(self, s: str) -> int:
        sign = None
        is_num = False
        num = 0
        comp = 2 ** 31
        for e in s.lstrip():
            if e in {'-', '+'} and not sign and not is_num:
                sign = e
            elif e.isdigit():
                is_num = True
                num = num * 10 + int(e)
                if num >= comp:
                    sign = -1 if sign and sign == '-' else 1
                    if sign == -1:
                        return -1 * comp
                    return comp - 1
            else:
                break
        sign = -1 if sign and sign == '-' else 1
        return sign * num
