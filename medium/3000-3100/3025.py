"""
Find the Number of Ways to Place People I.

Дан двумерный массив точек на координатной плоскости. Найти кол-во пар точек
A, B таких, что A лежит в верхнем левом углу от B, а в прямоугольнике,
определяемом точками A и B, не лежит других точек.

Наивным решением было бы перебрать все возможные пары точек и для каждой
проверять, удовлетворяют ли они условию и лежат ли в образуемом ими
прямоугольнике другие точки. Такое решение работает за O(n ** 3).

Используем другой подход. Отсортируем все точки по возрастанию координаты
X и по убыванию Y. Идем по полученному массиву справа налево и для каждой
точки перебираем все варианты слева. Подходящая точка точно должна иметь
координату Y не меньше, чем текущая точка, чтобы лежать в верхнем левом углу.
То есть нижняя граница равна points[i][1]. А верхняя граница будет меняться
при внутреннем проходе по массиву. Изначально эта граница не определена
(float('inf')). Пусть мы нашли первую точку, которая подходит под условие.
Предположим, что следующая точка имеет координату Y больше, чем points[i][1],
и не меньше, чем ранее найденная координата Y. Тогда прямоугольник,
образованный этой точкой вместе с текущей, будет заведомо включать в себя
первую найденную точку, что противоречит условию. Таким образом, нужная
точка определяется неравенством points[i][1] <= y < up_border, а up_border
снижается до координаты Y последней найденной точки. То есть ищется длина
строго убывающей последовательности координат Y точек слева до points[i][1].
Сложность O(n ** 2).

Лучшее решение: 15 ms, 17.70 Mb
#math #geometry #sorting
"""


class Solution:

    def numberOfPairs(self, points: list[list[int]]) -> int:
        points.sort(key=lambda e: (e[0], -e[1]))
        ans = 0
        for i in range(len(points) - 1, -1, -1):
            up_border = float('inf')
            low_border = points[i][1]
            for j in range(i - 1, -1, -1):
                curr = points[j][1]
                if low_border <= curr < up_border:
                    ans += 1
                    up_border = curr
        return ans
