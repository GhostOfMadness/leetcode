"""
Number of People Aware of a Secret.

В первый день 1 человек узнает секрет. Человек делится секретом с другим
человеком каждый день, спустя delay дней с момента, как он сам узнал секрет.
При этом человек забывает секрет спустя forget дней как узнал его. Например,
delay = 2, forget = 4. Тогда человек, узнавший секрет в первый день, будет
делится им в дни 3 и 4, а забудет его на день 5. Найти кол-во человек,
знающих секрет на конец дня n (по модулю 10 ** 9 + 7).

Используем динамическое программирование. Для каждого дня заводим массив
из 3-х элементов: сколько человек знают секрет, сколько человек могут им
поделиться, сколько человек его забыли. В первый день секрет знает 1 человек,
который может им делится с дня 1 + delay и забудет его в день 1 + forget.
Проходимся циклом по всем дням, начиная со 2-го. Сначала считаем, сколько
человек могут поделиться секретом в этот день. Это количество человек, которые
могли делиться секретом на прошлом шаге плюс те, кто может делиться начиная с
этого дня, минус те, кто забыли секрет в этот день. Это количество человек
может поделиться секретом, значит это количество человек узнает секрет в этот
день. Все они смогут делиться им, начиная с дня i + delay, и забудут секрет
в i + forget день. Количество человек, знающих секрет, равно кол-ву знающих
с прошлого шага минус кол-во забывших плюс кол-во только узнавших.

Лучшее решение: 7 ms, 17.98 Mb
#dynamic_programming
"""


class Solution:

    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:
        mod = 10 ** 9 + 7
        dp = [[0, 0, 0] for _ in range(n + 1)]
        dp[1][0] = 1
        if 1 + delay < n + 1:
            dp[1 + delay][1] = 1
        if 1 + forget < n + 1:
            dp[1 + forget][2] = 1
        for i in range(2, n + 1):
            share = (dp[i][1] + dp[i - 1][1] - dp[i][2]) % mod
            if i + delay < n + 1:
                dp[i + delay][1] = share
            if i + forget < n + 1:
                dp[i + forget][2] = share
            know = (dp[i - 1][0] - dp[i][2] + share) % mod
            dp[i][0] = know
            dp[i][1] = share
        return dp[n][0]


if __name__ == '__main__':
    res = Solution()
    n, delay, forget = 4, 1, 3
    print(res.peopleAwareOfSecret(n, delay, forget))
